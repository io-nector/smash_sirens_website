"""
Django settings for smash_sirens project.

Generated by 'django-admin startproject' using Django 5.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import os
import dj_database_url


#used for loading environment variables
# included dev installed python-dotenv package
from dotenv import load_dotenv
load_dotenv()

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'DJANGO_SECRET_KEY'

# SECURITY WARNING: don't run with debug turned on in production!
if os.getenv('DJANGO_DEBUG') == 'True':
    DEBUG = True
else:
    DEBUG = False
# DEBUG = 'DJANGO_DEBUG'

ALLOWED_HOSTS = ['smash-sirens-eafd8dd74e74.herokuapp.com','127.0.0.1','.herokuapp.com']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'users',
    'smash_sirens',
    'ecomerce_site',
    'storages',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    "whitenoise.middleware.WhiteNoiseMiddleware",
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'smash_sirens.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'smash_sirens.wsgi.application'

# AWS S3 SETTINGS - set here to be ahead of the static and media settings
#ADD AWS S3 SETTINGS
AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME = os.environ.get('AWS_STORAGE_BUCKET_NAME')
AWS_URL = os.environ.get('AWS_URL')
AWS_DEFAULT_ACL = None
AWS_S3_REGION_NAME = 'us-west-1'
AWS_S3_SIGNATURE_VERSION = 's3v4'

AWS_S3_FILE_OVERWRITE = True
AWS_DEFAULT_ACL = None
# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

postgresql_host = os.getenv('Host')
postgresql_database = os.getenv('Database')
postgresql_user = os.getenv('User')
postgresql_port = os.getenv('Port')
postgresql_password = os.getenv('Password')
postgresql_uri = os.getenv('DATABASE_URL')

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': postgresql_database,
        'USER': postgresql_user,
        'PASSWORD': postgresql_password,
        'HOST': postgresql_host,
        'PORT':  postgresql_port,
    }
}
# DATABASES = {

#     "default": {
#         "ENGINE": "django.db.backends.postgresql_psycopg2",
#         "NAME": "User",
#         "USER": "deanwatson",
#         "PASSWORD": "",
#         "HOST": "localhost",
#         "PORT": "",
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

#added for heroku deployment
# The absolute path to the directory where collectstatic will collect static files for deployment.


STATIC_URL = AWS_URL + '/static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static")
]

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')





# STATICFILES_DIRS = [
#     BASE_DIR / 'static',
# ]
# STATIC_ROOT = BASE_DIR / 'staticfiles'
# STATIC_URL = '/static/'

# STATICFILES_STORAGE = 'whitenoise.storage.CompressedStaticFilesStorage'
STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage' #added for S3 BUCKETS


# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom user model
# https://testdriven.io/blog/django-custom-user-model/
AUTH_USER_MODEL = "users.CustomUser"


#used for pillow and uploading images
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
# MEDIA_URL = '/media/'
MEDIA_URL = AWS_URL + '/media/' #added for S3 BUCKETS

DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'#added for S3 BUCKETS

import django_heroku
django_heroku.settings(locals(), staticfiles=False) #added for heroku deployment

